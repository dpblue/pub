/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test_map.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ade-sarr <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/28 15:02:02 by ade-sarr          #+#    #+#             */
/*   Updated: 2024/02/28 15:02:16 by ade-sarr         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "bsq.h"
#include "ft_str_nbr.h"
#include <stdlib.h>

void	setup_map(t_map *map, const char **lines)
{
	int	l;

	map->nblines = 9;
	map->width = ft_strlen(lines[0]);
	map->lines = malloc(map->nblines * sizeof(char *));
	if (!map->lines)
		memory_error(map);
	l = 0;
	while (l < map->nblines)
	{
		map->lines[l] = malloc(map->width * sizeof(char));
		if (!map->lines[l])
			memory_error(map);
		ft_strncpy(map->lines[l], lines[l], map->width);
		l++;
	}
	map->chr_empty = '.';
	map->chr_obst = 'o';
	map->chr_fill = 'x';
}

t_map	*create_map_example(void)
{
	const char	*lines[] = {
		"...........................",
		"....o......................",
		"............o..............",
		"...........................",
		"....o......................",
		"...............o...........",
		"...........................",
		"......o..............o.....",
		"..o.......o................"
	};
	t_map		*map;

	map = malloc(sizeof(t_map));
	if (!map)
		memory_error(NULL);
	map->lines = NULL;
	map->matrix = NULL;
	map->filebuffer = NULL;
	setup_map(map, lines);
	return (map);
}

void	test_hard_map(t_bsqconf conf)
{
	t_map	*map;

	map = create_map_example();
	if (map)
	{
		map->cf = conf;
		if (conf.dbg_flags & DBG_PRN_MAP0)
			print_map(map);
		map->nline = 0;
		map->sol_size = 0;
		find_solution_bt(map, 0, 0, map->width);
		if (conf.dbg_flags & DBG_PRN_RAWSOL)
			ft_printf("sol_line0: %i  sol_line1: %i  sol_x0: %i  sol_x1: %i\n",
				map->sol_line0, map->sol_line1, map->sol_x0, map->sol_x1);
		else
		{
			fill_map(map);
			print_map(map);
		}
	}
	else
		ft_puterrmsg(ERR_MAP_INVALID);
	free_map(&map);
}
